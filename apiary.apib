FORMAT: 1A
HOST: http://leor.localhost/

# LEOR

## Source Collection [/sources]

### List All Sources [GET]

After sending a source as a filter, list all those sources 

+ Request (application/json)

        {
            "title": "ENEM/2015",
            "published_at": "2017-07-11",
            "year": "2015",
            "institute": "UFPB",
            "link": "http://www.ufpb.br/arquivos/enem2015"
        }

+ Response 200 (application/json)

    + Body
    
            [
                {
                    "title": "ENEM/2014",
                    "published_at": "2017-07-11",
                    "year": "2014",
                    "institute": "UFPB",
                    "link": "http://www.ufpb.br/arquivos/enem2014"
                },
                {
                    "title": "ENEM/2015",
                    "published_at": "2017-07-11",
                    "year": "2015",
                    "institute": "UFPB",
                    "link": "http://www.ufpb.br/arquivos/enem2015"
                }
            ]   

+ Response 204


### Create a new source  [POST]

Create a new source through an object

+ Request (application/json)

        {
            "title": "NEW - ENEM/2015",
            "published_at": "NEW - 2017-07-11",
            "year": "NEW - 2015",
            "institute": "UFPB",
            "link": "NEW - http://www.ufpb.br/arquivos/enem2017"
        }

+ Response 201 (application/json)

        Result OK for new 

## Source [/sources/{source_id}]

Answer from a source through a *source_id*.

### Get a source [GET]
+ Request 

    + Headers

            Location: /sources/{source_id}

+ Response 200 (application/json)

    + Body

            {
                "title": "ENEM/2014",
                "published_at": "2017-07-11",
                "year": "2014",
                "institute": "UFPB",
                "link": "http://www.ufpb.br/arquivos/enem2014"
            }

+ Response 204 

### Delete [DELETE]

+ Request 

    + Headers

            Location: /sources/{source_id}

+ Response 204

### Update [PUT]

+ Request 

    + Headers

            Location: /sources/{source_id}
    + Body

            {
                "title": "other title",
                "published_at": "other 2017-07-11",
                "year": "other 2014",
                "institute": "UFPB",
                "link": "other http://www.ufpb.br/arquivos/enem2014"
            }
                
+ Response 201 (application/json)

        Result OK for new 


## Alternativetype Collection [/alternativetypes]

### List All alternativetypes [GET]

List all alternative types 
In a question, you have to choose an alternative type like "ABCDE", "VF", etc.

+ Request (application/json)

        {
            "description": "A..E",
            "options": "ABCDE"
        }

+ Response 200 (application/json)

    + Body
        
            [
                {
                    "description": "A..E",
                    "options": "ABCDE"
                },
                {
                    "description": "A..E",
                    "options": "ABCDE"
                }
            ]   

+ Response 204


### Create a new alternativetypes  [POST]

Create a new AlternativeType through an object

+ Request (application/json)

        {
            "description": "A..E",
            "options": "ABCDE"
        }

+ Response 201 (application/json)

        Result OK for new 

## Alternativetypes [/alternativetypes/{alternativetype_id}]

### Get a alternativetypes [GET]
+ Request 

    + Headers

            Location: /alternativetypes/{alternativetype_id}

+ Response 200 (application/json)

    + Body

            {
                "description": "A..E",
                "options": "ABCDE"
            }

+ Response 204 

### Delete [DELETE]

+ Request 

    + Headers

            Location: /alternativetypes/{alternativetype_id}

+ Response 204

### Update [PUT]

+ Request 

    + Headers

            Location: /alternativetypes/{alternativetype_id}
    + Body

            {
                "description": "A..E",
                "options": "ABCDE"
            }
   
+ Response 201 (application/json)

        Result OK for new 

## Subjects Collection [/subjects]

### List All subjects [GET]

List all subjects 

+ Request (application/json)

        {
            "name": "geo",
            "abbreviation": "GEO"
        }

+ Response 200 (application/json)

    + Body
        
            [
                {
                    "name": "GEOGRAFIA",
                    "abbreviation": "GEOG"
                },
                {
                    "name": "GEOLOGIA I",
                    "abbreviation": "GEOI"
                }
            ]   

+ Response 204


### Create a new subject  [POST]

+ Request (application/json)

        {
                "description": "A..E",
                "options": "ABCDE"
        }

+ Response 201 (application/json)

        Result OK for new 

## Subjects [/subjects/{subject_id}]

Answer from a subject through a *subject_id*.

### Get a subject [GET]
+ Request 

    + Headers

            Location: /subjects/{subject_id}

+ Response 200 (application/json)

    + Body

            {
                "description": "A..E",
                "options": "ABCDE"
            }

+ Response 204 

### Delete [DELETE]

+ Request 

    + Headers

            Location: /subjects/{subject_id}

+ Response 204

### Update [PUT]

+ Request 

    + Headers

            Location: /subjects/{subject_id}
    + Body

            {
                "description": "A..E",
                "options": "ABCDE"
            }
                
+ Response 201 (application/json)

        Result OK for new 

## Contents Collection [/contents]

A content has a subject

### List All contents [GET]

List all contents 

+ Request (application/json)

        {
            "subject" :
            {
    
                "description": "A..E",
                "options": "ABCDE"
            },
            "description": "Adjetivos"
        
        }

+ Response 200 (application/json)

    + Body
        
            [
                {
                    "subject" :
                    {
                                "description": "A..E",
                                "options": "ABCDE"
                    },
                    "description": "Adjetivos"
                },
                {
                    "subject" :
                    {
                                "description": "A..E",
                                "options": "ABCDE"
                    },
                    "description": "Adjetivos"
                }
            ]   

+ Response 204


### Create a new content  [POST]

Create a new content through an object

+ Request (application/json)

            {
                "subject" :
                {
        
                            "description": "A..E",
                            "options": "ABCDE"
                },
                "description": "Adjetivos"
            }

+ Response 201 (application/json)

        Result OK for new 

## Content [/contents/{content_id}]

A content has a subject
Answer from a content through a *content_id*.

### Get a content [GET]
+ Request 

    + Headers

            Location: /contents/{content_id}

+ Response 200 (application/json)

    + Body

            {
                "subject" :
                {
        
                    "description": "A..E",
                    "options": "ABCDE"
                },
                "description": "Adjetivos"
            }
            
+ Response 204 

### Delete [DELETE]

+ Request 

    + Headers

            Location: /contents/{content_id}

+ Response 204

### Update [PUT]

+ Request 

    + Headers

            Location: /contents/{content_id}
    + Body

            {
                "subject" :
                {
        
                    "description": "A..E",
                    "options": "ABCDE"
                },
                "description": "Adjetivos"
            }
                
+ Response 201 (application/json)

        Result OK for new 

## Users Collection [/users]

user(login,password,active,email,register_at,score)
Como poderemos assegurar que caso o usuário faça mal uso da aplicação, seja penalizado? log com ip?

### List All users [GET]

List all users 

+ Request (application/json)

        {
            "login": "user1",
            "password": "123456",
            "active": "true",
            "email": "user1@mail.com",
            "register_at": "2017-07-18",
            "score": "4,5"        
        }

+ Response 200 (application/json)

    + Body
        
            [
                {
                    "login": "user1",
                    "password": "123456",
                    "active": "true",
                    "email": "user1@mail.com",
                    "register_at": "2017-07-18",
                    "score": "4,5"        
                }
            ]   

+ Response 204


### Create a new user  [POST]

Create a new user through an object

+ Request (application/json)

            {
                "login": "user1",
                "password": "123456",
                "active": "true",
                "email": "user1@mail.com",
                "register_at": "2017-07-18",
                "score": "4,5"        
            }

+ Response 201 (application/json)

        Result OK for new 

## User [/users/{user_id}]

A user has a subject
Answer from a user through a *user_id*.

### Get a user [GET]
+ Request 

    + Headers

            Location: /users/{user_id}

+ Response 200 (application/json)

    + Body

            {
                "login": "user1",
                "password": "123456",
                "active": "true",
                "email": "user1@mail.com",
                "register_at": "2017-07-18",
                "score": "4,5"        
            }
            
+ Response 204 

### Delete [DELETE]

+ Request 

    + Headers

            Location: /users/{user_id}

+ Response 204

### Update [PUT]

+ Request 

    + Headers

            Location: /users/{user_id}
    + Body

            {
                "login": "user1",
                "password": "123456",
                "active": "true",
                "email": "user1@mail.com",
                "register_at": "2017-07-18",
                "score": "4,5"        
            }
                
+ Response 201 (application/json)

        Result OK for new 
        

## UserEvaluations Collection [/userevaluations]

userevaluation(user*,userevaluator*,score,publish_at)
Todo usuário recebe avaliações de outro usuário que indicará sua reputação

### List All UserEvaluations [GET]

List all userevaluations 

+ Request (application/json)

        {
            "user": "user1",
            "userevaluator": "user"
        }

+ Response 200 (application/json)

    + Body
        
            [
                {
                    "user": "user1",
                    "userevaluator": "user"
                }
            ]   

+ Response 204


### Create a new UserEvaluation  [POST]

Create a new Userevaluation through an object

+ Request (application/json)

            {
                "user": "user1",
                "userevaluator": "user"
            }

+ Response 201 (application/json)

        Result OK for new 

## UserEvaluation [/userevaluations/{userevaluation_id}]

A userevaluation has a subject
Answer from a userevaluation through a *userevaluation_id*.

### Get a userevaluation [GET]
+ Request 

    + Headers

            Location: /userevaluations/{userevaluation_id}

+ Response 200 (application/json)

    + Body

            {
                "user": "user1",
                "userevaluator": "user"
            }
            
+ Response 204 

### Delete [DELETE]

+ Request 

    + Headers

            Location: /userevaluations/{userevaluation_id}

+ Response 204

### Update [PUT]

+ Request 

    + Headers

            Location: /userevaluations/{userevaluation_id}
    + Body

            {
                "user": "user1",
                "userevaluator": "user"
            }
                
+ Response 201 (application/json)

        Result OK for new 
    
## Areas Collection [/areas]

area(name,description)
Main teacher's area

### List All areas [GET]

List all areas 

+ Request (application/json)

        {
            "name": "matemática",
            "description": "Matemática e suas tecnologias"
        }

+ Response 200 (application/json)

    + Body
        
            [
                {
                    "name": "matemática",
                    "description": "Matemática e suas tecnologias"
                }
            ]   

+ Response 204


### Create a new area  [POST]

Create a new area through an object

+ Request (application/json)

            {
                "name": "matemática",
                "description": "Matemática e suas tecnologias"
            }

+ Response 201 (application/json)

        Result OK for new 

## Area [/areas/{area_id}]

A user has an area

### Get a area [GET]
+ Request 

    + Headers

            Location: /areas/{area_id}

+ Response 200 (application/json)

    + Body

            {
                "name": "matemática",
                "description": "Matemática e suas tecnologias"
            }
            
+ Response 204 

### Delete [DELETE]

+ Request 

    + Headers

            Location: /areas/{area_id}

+ Response 204

### Update [PUT]

+ Request 

    + Headers

            Location: /areas/{area_id}
    + Body

            {
                "name": "matemática",
                "description": "Matemática e suas tecnologias"
            }
                
+ Response 201 (application/json)

        Result OK for new 

## Evaluations Collection [/evaluations]

Data diciotnary:
evaluation(user*,description,publish_at,preview_at,place_name)

Resume:
An evaluationn is from a teacher and will be aplly in class room.
Ex: 
School XYZ
Student: ____________________ 

That evaluation was made in an odt file and the teacher is free to change it.

### List All evaluations [GET]

List all evaluations 

+ Request (application/json)

        {
            "user": "user1",
            "description": "Period 1 - 8th - Mathematic",
            "publish_at": "2017-07-18",
            "place_name": "School X",
        }

+ Response 200 (application/json)

    + Body
        
            [
                {
                    "user": "user1",
                    "description": "Period 1 - 8th - Mathematic",
                    "publish_at": "2017-07-18",
                    "place_name": "School X",
                }
            ]   

+ Response 204


### Create a new evaluation  [POST]

Create a new evaluation through an object

+ Request (application/json)

            {
                "user": "user1",
                "description": "Period 1 - 8th - Mathematic",
                "publish_at": "2017-07-18",
                "place_name": "School X",
            }

+ Response 201 (application/json)

        Result OK for new 

## Evaluation [/evaluations/{evaluation_id}]

A user has many evaluations

### Get a evaluation [GET]
+ Request 

    + Headers

            Location: /evaluations/{evaluation_id}

+ Response 200 (application/json)

    + Body

            {
                "user": "user1",
                "description": "Period 1 - 8th - Mathematic",
                "publish_at": "2017-07-18",
                "place_name": "School X",
            }
            
+ Response 204 

### Delete [DELETE]

+ Request 

    + Headers

            Location: /evaluations/{evaluation_id}

+ Response 204

### Update [PUT]

+ Request 

    + Headers

            Location: /evaluations/{evaluation_id}
    + Body

            {
                "user": "user1",
                "description": "Period 1 - 8th - Mathematic",
                "publish_at": "2017-07-18",
                "place_name": "School X",
            }
                
+ Response 201 (application/json)

        Result OK for new 

## EvaluationVersions Collection [/evaluationversions]

Any evaluations has one many versions. Those are used to prevent cheating ons student test.

Data diciotnary:
evaluationversion(evaluation*,version,publish_at)

### List All EvaluationVersions [GET]

List all evaluationversions 

+ Request (application/json)

        {
            "evaluation": {evaluation},
            "version": "1"
            "publish_at": "2017-07-18"
        }

+ Response 200 (application/json)

    + Body
        
            [
                {
                    "evaluation": {evaluation},
                    "version": "1"
                    "publish_at": "2017-07-18"
                }
            ]   

+ Response 204


### Create a new EvaluationVersion  [POST]

Create a new evaluationversion through an object

+ Request (application/json)

            {
                "evaluation": {evaluation},
                "version": "1"
                "publish_at": "2017-07-18"
            }

+ Response 201 (application/json)

        Result OK for new 

## EvaluationVersion [/evaluationversions/{evaluationversion_id}]

A evaluationversion has a evaluation
Answer from a evaluationversion through a *evaluationversion_id*.

### Get a evaluationversion [GET]
+ Request 

    + Headers

            Location: /evaluationversions/{evaluationversion_id}

+ Response 200 (application/json)

    + Body

            {
                "evaluation": {evaluation},
                "version": "1"
                "publish_at": "2017-07-18"
            }
            
+ Response 204 

### Delete [DELETE]

+ Request 

    + Headers

            Location: /evaluationversions/{evaluationversion_id}

+ Response 204

### Update [PUT]

+ Request 

    + Headers

            Location: /evaluationversions/{evaluationversion_id}
    + Body

            {
                "evaluation": {evaluation},
                "version": "1"
                "publish_at": "2017-07-18"
            }
                
+ Response 201 (application/json)

        Result OK for new